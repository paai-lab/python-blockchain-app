version: '3.2'

services: 
    node1:
        build: 
            context: .
            dockerfile: './python_blockchain_app/compose/webapp/Dockerfile-node'
        ports:
            - "8001:5000"
        command:
            - python
            - node_server.py
        networks:
            testing_net:
                ipv4_address: 172.28.1.1

    node2:
        image: pythonblockchainapp_node1
        ports:
            - "8002:5000"
        command:
            - python
            - node_server.py
        networks:
            testing_net:
                ipv4_address: 172.28.1.2
    
    node3:
        image: pythonblockchainapp_node1
        ports:
            - "8003:5000"
        command:
            - python
            - node_server.py
        networks:
            testing_net:
                ipv4_address: 172.28.1.3
    
    
    node4:
        image: pythonblockchainapp_node1
        ports:
            - "8004:5000"
        command:
            - python
            - node_server.py
        networks:
            testing_net:
                ipv4_address: 172.28.1.4
    
    node5:
        image: pythonblockchainapp_node1
        ports:
            - "8005:5000"
        command:
            - python
            - node_server.py
        networks:
            testing_net:
                ipv4_address: 172.28.1.5
    

    # webapp:
    #     build: './pythonblockchainapp/webapp/'
    #     ports:
    #         - "5000:5000"
    #     command: sh -c "python3 run_app.py && sh ./flaskapp.sh"
    #     networks:
    #         mynet:
    #             ipv4_address: 172.28.3.1

    
    mongodb:
        build: ./mongodb
        ports: 
            - "${MONGO_PORT}:27017"
        volumes: 
            - ./mongodb/data:/data/db
        env_file:
            - .env
        networks:
            testing_net:
                ipv4_address: 172.28.3.1
            
networks:
    testing_net:
        ipam:
            driver: default
            config:
                - subnet: 172.28.0.0/16